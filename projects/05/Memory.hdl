// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:


    /* Not of addr[14] */
    Not(in=address[14], out=notAddr14);


    /* KBDETECT: detects 110 0000 0000 0000 = 2^14 + 2^13 = 16384+8192 = 24576
        of the 15 address bits:
            we NOT addr[13] and addr[14] as they map to 2^13 and 2^14
            we put 8 into one Or8Way
            and 7 + false into another Or8Way
            if we NOT the output of these Or8Ways, we get a 1 if all bits are 0
        then we AND both
        output: 1 if 15 bits equal 110 0000 0000 0000

        ðŸ›  according to the spec any address > 0x6000 is invalid
            maybe we should only check addr[14] AND addr[13]
                outputs 1 if both bits are on; addr >= 24576
    */
    // And(a=address[14], b=address[13], out=KBDetect);


    /* RAM: a RAM16K with in[16], addr[0..14], and ramOut wire 
        load bit: load AND(NOT(addr[14]), NOT(KBDetect))
            â†’ only load RAM if address is below 16384
            â†’ no need to check for KBDetect since that would be >16384

        CHIP RAM16K
            IN in[16], load, address[14]; note index 14 is 2^13=8192
            OUT out[16];
    */
    And(a=notAddr14, b=load, out=RAMLoad);
    RAM16K(in=in, load=RAMLoad, address=address[0..13], out=RamOut);


    /* SCREEN: a RAM8K 'Screen' chip with in[16], addr[0..13], and screenOut wire
        load bit: load AND addr[14] AND NOT addr[13]
            â†’ we could also check KBDetect, but unnecessary because >24576 is invalid?
        addr[13] is 2^13=8192. Screen memory is accessed only when addr[14]=1 (address â‰¥ 16384) and addr[13]=0 (16384+0*8192)
    */
    Not(in=address[13], out=notAddr13);
    And(a=address[14], b=notAddr13, out=ScreenLoad);
    Screen(in=in, load=ScreenLoad, address=address[0..12], out=ScreenOut);


    /* OUT_SELECTOR: selects between outputs of RAM, Screen, or Keyboard chips
        Mux4Way16 selector bits: addr[14]=0 means addr is no larger than 2^14-1=16383
            addr[14] â†’ 2^14=16384
            addr[13] â†’ 2^13=8192
        Mux4Way16 inputs:
            a. RAM â†’ 00
            b. RAM â†’ 01. range from [0, 16383]
            c. Screen â†’ 10. range from [16384=2^14, 2^14+2^13-1=16384+8192-1=24575]
            d. Keyboard â†’ 11. 24576

        CHIP Mux4Way16
            IN a[16], b[16], c[16], d[16], sel[2];
            OUT out[16];
    */
    Mux4Way16(a=RamOut, b=RamOut, c=ScreenOut, d=KeyboardOut, sel[0]=address[13], sel[1]=address[14], out=out);


    /* KEYBOARD: a 16-bit Register 'Keyboard' chip with one out wire 
        A Mux controls this with KBDetect as the selector
            Mux16
                a: KeyboardOut
                b: false

        CHIP Mux16 
            IN a[16], b[16], sel;
            OUT out[16];

        This mux is no longer necessary with simplified KBDetect!
    */
    Keyboard(out=KeyboardOut);
    // Mux16(a=false, b=KeyboardOut, sel=KBDetect, out=KBDetectMux);
}