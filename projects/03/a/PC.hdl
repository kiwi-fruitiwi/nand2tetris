// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */

CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS:

    // this register is the core of our counter
    Register(in=resetMux, load=true, out=out, out=feedback);

    // incrementer: we feed the output of our register to this
    Inc16(in=feedback, out=increment);

    // now we have 3 muxes that control the nested if loops
    // outermost mux: inc or feedback?
    Mux16(a=feedback, b=increment, sel=inc, out=incMux);

    // middle mux: increment or load from in[16]?
    Mux16(a=incMux, b=in, sel=load, out=loadMux);

    // final mux: load or reset to 0?
    Mux16(a=loadMux, b=false, sel=reset, out=resetMux);
   

/*  the below didn't work because load=1, inc=1 was wrong

    // build inc OR reset OR load to use as "load" for our register
    Or(a=inc, b=reset, out=incOrReset);
    Or(a=incOrReset, b=load, out=regLoad);

    // in/inc mux
    Mux16(a=in, b=incOut, sel=inc, out=inIncOut);

    // false or in/inc mux which is wired to our register's in[16]
    Mux16(a=inIncOut, b=false, sel=reset, out=regIn);

    // our register
    Register(in=regIn, load=regLoad, out=out, out=regOut);

    // inc16 between our register and in/inc mux
    Inc16(in=regOut, out=incOut);
*/

}